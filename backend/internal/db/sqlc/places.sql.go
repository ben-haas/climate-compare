// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: places.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPlace = `-- name: CreatePlace :one
INSERT INTO places (name, country, latitude, longitude, altitude)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, country, latitude, longitude, altitude
`

type CreatePlaceParams struct {
	Name      string         `json:"name"`
	Country   string         `json:"country"`
	Latitude  pgtype.Numeric `json:"latitude"`
	Longitude pgtype.Numeric `json:"longitude"`
	Altitude  pgtype.Int4    `json:"altitude"`
}

func (q *Queries) CreatePlace(ctx context.Context, arg CreatePlaceParams) (Place, error) {
	row := q.db.QueryRow(ctx, createPlace,
		arg.Name,
		arg.Country,
		arg.Latitude,
		arg.Longitude,
		arg.Altitude,
	)
	var i Place
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Country,
		&i.Latitude,
		&i.Longitude,
		&i.Altitude,
	)
	return i, err
}

const deletePlace = `-- name: DeletePlace :exec
DELETE FROM places
WHERE id = $1
`

func (q *Queries) DeletePlace(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePlace, id)
	return err
}

const getPlace = `-- name: GetPlace :one
SELECT id, name, country, latitude, longitude, altitude
FROM places
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPlace(ctx context.Context, id int32) (Place, error) {
	row := q.db.QueryRow(ctx, getPlace, id)
	var i Place
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Country,
		&i.Latitude,
		&i.Longitude,
		&i.Altitude,
	)
	return i, err
}

const listPlaces = `-- name: ListPlaces :many
SELECT id, name, country, latitude, longitude, altitude
FROM places
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListPlacesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPlaces(ctx context.Context, arg ListPlacesParams) ([]Place, error) {
	rows, err := q.db.Query(ctx, listPlaces, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Place{}
	for rows.Next() {
		var i Place
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Country,
			&i.Latitude,
			&i.Longitude,
			&i.Altitude,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
