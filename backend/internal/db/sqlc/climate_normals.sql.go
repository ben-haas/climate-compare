// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: climate_normals.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createClimate = `-- name: CreateClimate :one
INSERT INTO climate_normals (place_id, month, tavg, tmin, tmax, prcp, wspd, pres, tsun, last_updated)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING id, place_id, month, tavg, tmin, tmax, prcp, wspd, pres, tsun, last_updated
`

type CreateClimateParams struct {
	PlaceID     pgtype.Int4        `json:"place_id"`
	Month       int32              `json:"month"`
	Tavg        pgtype.Numeric     `json:"tavg"`
	Tmin        pgtype.Numeric     `json:"tmin"`
	Tmax        pgtype.Numeric     `json:"tmax"`
	Prcp        pgtype.Numeric     `json:"prcp"`
	Wspd        pgtype.Numeric     `json:"wspd"`
	Pres        pgtype.Numeric     `json:"pres"`
	Tsun        pgtype.Int4        `json:"tsun"`
	LastUpdated pgtype.Timestamptz `json:"last_updated"`
}

func (q *Queries) CreateClimate(ctx context.Context, arg CreateClimateParams) (ClimateNormal, error) {
	row := q.db.QueryRow(ctx, createClimate,
		arg.PlaceID,
		arg.Month,
		arg.Tavg,
		arg.Tmin,
		arg.Tmax,
		arg.Prcp,
		arg.Wspd,
		arg.Pres,
		arg.Tsun,
		arg.LastUpdated,
	)
	var i ClimateNormal
	err := row.Scan(
		&i.ID,
		&i.PlaceID,
		&i.Month,
		&i.Tavg,
		&i.Tmin,
		&i.Tmax,
		&i.Prcp,
		&i.Wspd,
		&i.Pres,
		&i.Tsun,
		&i.LastUpdated,
	)
	return i, err
}

const getClimate = `-- name: GetClimate :one
SELECT id, place_id, month, tavg, tmin, tmax, prcp, wspd, pres, tsun, last_updated
FROM climate_normals
WHERE place_id = $1
LIMIT 1
`

func (q *Queries) GetClimate(ctx context.Context, placeID pgtype.Int4) (ClimateNormal, error) {
	row := q.db.QueryRow(ctx, getClimate, placeID)
	var i ClimateNormal
	err := row.Scan(
		&i.ID,
		&i.PlaceID,
		&i.Month,
		&i.Tavg,
		&i.Tmin,
		&i.Tmax,
		&i.Prcp,
		&i.Wspd,
		&i.Pres,
		&i.Tsun,
		&i.LastUpdated,
	)
	return i, err
}
